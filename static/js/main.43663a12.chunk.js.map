{"version":3,"sources":["Components/Comments/Comment.js","Components/Comments/CommentList.js","Components/Comments/CommentForm.js","Components/Panel.js","Components/AddRestaurant.js","Components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Comment","props","className","width","height","src","comment","toLowerCase","alt","stars","CommentList","selectedRestaurantRatings","ratings","useState","setRatings","useEffect","length","map","rate","index","key","CommentForm","selectedRestaurant","setStars","setComment","error","setError","method","onSubmit","e","preventDefault","push","setSelectedRestaurant","name","onClick","parseInt","target","value","onChange","placeholder","rows","Panel","streetView","lat","long","style","panelStyles","restaurantName","address","undefined","average","AddRestaurant","useForm","register","handleSubmit","errors","show","closeModal","data","newRestaurant","restaurant","adresse","newRestLat","newRestLng","restaurants","ref","required","type","GoogleApiWrapper","apiKey","mapStyles","setMapStyles","visibility","setPanelStyles","geoloc","nearbySearch","setNearbySearch","restaurantDisplayed","onMarkerClick","position","right","overflow","selectedStars","filter","rest","setShow","openModal","openMod","setOpenMod","setNewRestLat","setNewRestLng","mapProps","clickEvent","latLng","lng","google","onReady","service","maps","places","PlacesService","console","log","request","location","LatLng","radius","forEach","element","vicinity","geometry","rating","zoom","initialCenter","disableDefaultUI","bind","title","App","setRestaurants","setGeoloc","setSelectedStars","setOpenModal","showPosition","coords","latitude","longitude","a","fetch","then","response","json","fetchResult","totalStars","reduce","total","star","fetchData","navigator","geolocation","getCurrentPosition","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"iOAuBeA,MArBf,SAAiBC,GAEb,OACI,yBAAKC,UAAU,cACf,yBACIA,UAAU,wBACVC,MAAM,KACNC,OAAO,KACPC,IAAG,6CAAwCJ,EAAMK,QAAQC,cAAtD,iBACHC,IAAI,WAGR,yBAAKN,UAAU,oDACX,2BAAOA,UAAU,0BAA0BD,EAAMQ,OACjD,wBAAIP,UAAU,wBAAd,SAA4CD,EAAMQ,OACjDR,EAAMK,WCqBJI,MAnCf,SAAqBT,GAEjB,IAAMU,EAA4BV,EAAMW,QAFjB,EAGOC,mBAAS,IAHhB,mBAGhBD,EAHgB,KAGPE,EAHO,KAUvB,OAJAC,qBAAU,WACND,EAAWH,KACZ,CAACA,IAGAC,EACA,yBAAKV,UAAU,eACX,wBAAIA,UAAU,mBACV,0BAAMA,UAAU,uBAAuBU,EAAQI,QADnD,UAEYJ,EAAQI,OAAS,EAAI,IAAM,IAInB,IAAnBJ,EAAQI,OACL,yBAAKd,UAAU,gCAAf,2BAGA,KAEHU,EAAQK,KAAI,SAACC,EAAMC,GAAP,OACT,kBAAC,EAAD,CAASC,IAAKD,EAAOb,QAASY,EAAKZ,QAASG,MAAOS,EAAKT,YAK9D,yCCkDKY,MAjFf,SAAqBpB,GAEjB,IAAMqB,EAAqBrB,EAAMqB,mBAFV,EAGGT,mBAAS,KAHZ,mBAGhBJ,EAHgB,KAGTc,EAHS,OAIOV,mBAAS,IAJhB,mBAIhBP,EAJgB,KAIPkB,EAJO,OAKGX,mBAAS,IALZ,mBAKhBY,EALgB,KAKTC,EALS,KAyCvB,OACI,oCACI,0BAAMC,OAAO,OAAOC,SAzB5B,SAAkBC,GAEdA,EAAEC,iBACY,MAAVrB,GAA6B,KAAZH,GACjBoB,EAAS,IACTJ,EAAmBV,QAAQmB,KAAK,CAACtB,MAAOA,EAAOH,QAASA,IAExDL,EAAM+B,sBAAsBV,GAC5BE,EAAW,KAGXE,EAAS,+DAeL,yBAAKxB,UAAU,cACX,2DACA,4BAAQ+B,KAAK,qBAAsBC,QAtCnD,SAAqBL,GACjBN,EAASY,SAASN,EAAEO,OAAOC,SAqC0CnC,UAAU,gBAC/D,4BAAQmC,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,eAIR,yBAAKnC,UAAU,cACX,8BACAoC,SA7ChB,SAA2BT,GACvBL,EAAWK,EAAEO,OAAOC,QA6CRA,MAAO/B,EACPJ,UAAU,eACVqC,YAAY,kCACZN,KAAK,UACLO,KAAK,OA5BVf,EACL,yBAAKvB,UAAU,sBAAsBuB,GACnC,KAgCI,yBAAKvB,UAAU,cACX,4BAAQA,UAAU,mBAAlB,oBAKR,kBAAC,EAAD,CAAaU,QAASU,EAAmBV,YCjDtC6B,MA1Bf,SAAexC,GAEX,IAAMqB,EAAqBrB,EAAMqB,mBAK3BoB,EAAa,yEAFNpB,EAAmBqB,IAEoE,IADvFrB,EAAmBsB,KACiF,0EAEjH,OACI,yBAAKC,MAAO5C,EAAM6C,aACd,4BAAKxB,EAAmByB,gBACxB,yBAAKvC,IAAKc,EAAmByB,eAAgB1C,IAAKqC,IAClD,wCACA,2BAAIpB,EAAmB0B,SACvB,8CACA,gCAAmCC,IAA/B3B,EAAmB4B,QAAwB,cAAgB5B,EAAmB4B,SAClF,yCACA,kBAAC,EAAD,CACAlB,sBAAuB/B,EAAM+B,sBAC7BV,mBAAoBA,M,QCajB6B,MAjCf,SAAuBlD,GAAO,IAAD,EAEkBmD,cAAnCC,EAFiB,EAEjBA,SAAUC,EAFO,EAEPA,aAAcC,EAFP,EAEOA,OACxBC,EAAqBvD,EAArBuD,KAAMC,EAAexD,EAAfwD,WAed,OACI,oCACI,yBAAKvD,UAAWsD,EAAO,YAAc,WACjC,4BAAQtB,QAASuB,GAAjB,QACA,iEACA,0BAAM7B,SAAU0B,GAjBX,SAAAI,GAEb,IAAIC,EAAgB,CACZZ,eAAgBW,EAAKE,WACrBZ,QAASU,EAAKG,QACdlB,IAAK1C,EAAM6D,WACXlB,KAAM3C,EAAM8D,WACZnD,QAAS,IAEjBX,EAAM+D,YAAYjC,KAAK4B,OASX,2BAAO1B,KAAK,aAAcgC,IAAKZ,EAAS,CAAEa,UAAU,IAAS3B,YAAc,sBAD/E,IACuGgB,EAAOK,YAAc,wDAAoC,6BAAM,6BAClK,2BAAO3B,KAAK,UAAUgC,IAAKZ,EAAS,CAAEa,UAAU,IAAS3B,YAAa,0BAF1E,IAEqGgB,EAAOM,SAAW,wDAAoC,6BAAM,6BAC7J,2BAAOM,KAAK,SAASjC,QAASuB,QCsGnCW,iCAAiB,CAC9BC,OAAQ,2CADKD,EA9HR,SAAuBnE,GAAQ,IAAD,SAGDY,mBAAS,CAACV,MAAO,OAAOC,OAAQ,SAH/B,mBAG5BkE,EAH4B,KAGjBC,EAHiB,OAIG1D,mBAAS,CAAC2D,WAAY,WAJzB,mBAI5B1B,EAJ4B,KAIf2B,EAJe,OAKb5D,mBAASZ,EAAM+D,aAA9BA,EAL4B,sBAMlBnD,mBAASZ,EAAMyE,QAAzBA,EAN4B,sBAOK7D,wBAASoC,GAPd,mBAO5B0B,EAP4B,KAOdC,EAPc,OAQiB/D,wBAASoC,GAR1B,mBAQ5B3B,EAR4B,KAQRU,EARQ,KAwC/B6C,EAAsB,KAa1B,SAASC,EAAc3D,GACrBoD,EAAa,CAACpE,MAAO,MAAMC,OAAQ,SACnCqE,EAAe,CACbM,SAAU,WACVC,MAAM,MACN5E,OAAQ,OACRD,MAAO,MACP8E,SAAU,SAEZjD,EAAsB6C,EAAoB1D,IAnB1C0D,EADyB,MAAxB5E,EAAMiF,oBAAiDjC,IAAxBhD,EAAMiF,cAChBP,EAEAA,EAAaQ,QAAQ,SAAAC,GACzC,GAAGA,EAAKlC,SAAWf,SAASlC,EAAMiF,eAChC,OAAOE,KA/CsB,MAkEXvE,oBAAS,GAlEE,mBAkE5B2C,EAlE4B,KAkEtB6B,EAlEsB,OAmELxE,mBAASZ,EAAMqF,WAnEV,mBAmE5BC,EAnE4B,KAmEnBC,EAnEmB,OAwEC3E,qBAxED,mBAwE5BiD,EAxE4B,KAwEhB2B,EAxEgB,OAyEC5E,qBAzED,mBAyE5BkD,EAzE4B,KAyEhB2B,EAzEgB,KAyFnC,OAdA3E,qBAAU,WACRyE,EAAWvF,EAAMqF,aAChB,CAACrF,EAAMqF,YAaR,oCACE,kBAAC,MAAD,CACEpD,QAbN,SAAoByD,EAAU1E,EAAK2E,GAEjCH,EAAcG,EAAWC,OAAOlD,OAChC+C,EAAcE,EAAWC,OAAOC,OAE5BP,GACFF,GAAQ,IAQNU,OAAQ9F,EAAM8F,OACdC,QAnFN,SAAqBL,EAAU1E,GAAM,IAC5B8E,EAAUJ,EAAVI,OACDE,EAAU,IAAIF,EAAOG,KAAKC,OAAOC,cAAcnF,GACrDoF,QAAQC,IAAIP,EAAQE,GACpB,IACMM,EAAU,CACdC,SAFmB,IAAIT,EAAOG,KAAKO,OAAO/B,EAAO/B,IAAK+B,EAAOoB,KAG7DY,OAAQ,MACRvC,KAAM,CAAC,eAET8B,EAAQtB,aAAa4B,GAAS,SAAC7C,GAC7B2C,QAAQC,IAAI5C,GACZA,EAAKiD,SAAQ,SAACC,EAASzF,GACrB6C,EAAYjC,KACV,CACEZ,MAAO6C,EAAYhD,OACnB+B,eAAe6D,EAAQ3E,KACvBe,QAAQ4D,EAAQC,SAChBlE,IAAIiE,EAAQE,SAASN,SAAS7D,MAC9BC,KAAKgE,EAAQE,SAASN,SAASV,MAC/BlF,QAAS,GACTsC,QAAS0D,EAAQG,YAGvBnC,EAAgBZ,OA4DdgD,KAAM,GACNnE,MAAOyB,EACP2C,cAAevC,EACfwC,kBAAmB,QAGDjE,IAAjB0B,EACCE,EAAoB5D,KAAI,SAACmE,EAAMjE,GAAP,OACtB,kBAAC,SAAD,CACEC,IAAKD,EACLe,QAAS4C,EAAcqC,KAAK,EAAMhG,GAClCiG,MAAOhC,EAAKrC,eACZd,KAAMmD,EAAKrC,eACXgC,SAAU,CAACpC,IAAKyC,EAAKzC,IAAKmD,IAAKV,EAAKxC,WAEtCyD,QAAQC,IAAI,WAGlB,kBAAC,EAAD,CAAexC,WAAYA,EAAYC,WAAYA,EAAYN,WA5ChD,kBAAM4B,GAAQ,IA4C0D7B,KAAMA,EAAMQ,YAAaA,SACxFf,IAAvB3B,EACD,kBAAC,EAAD,CACEwB,YAAaA,EACbxB,mBAAoBA,EACpBU,sBAAuBA,IAEvBqE,QAAQC,IAAI,oBCzCLe,MAjFf,WAAe,MAGyBxG,mBAAS,IAHlC,mBAGNmD,EAHM,KAGOsD,EAHP,OAIezG,mBAAS,CAAC8B,IAAK,QAASmD,KAAK,UAJ5C,mBAINpB,EAJM,KAIE6C,EAJF,OAK6B1G,qBAL7B,mBAKNqE,EALM,KAKSsC,EALT,OAMqB3G,oBAAS,GAN9B,mBAMNyE,EANM,KAMKmC,EANL,KAkDb,OA1CA1G,qBAAU,WA4BR,SAAS2G,EAAa3C,GACpBwC,EAAU,CACR5E,IAAKoC,EAAS4C,OAAOC,SACrB9B,IAAKf,EAAS4C,OAAOE,aA5BV,uCAAG,4BAAAC,EAAA,sEACUC,MAAM,sBAC7BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAFb,QACVC,EADU,QAKJlH,KAAI,SAAAmE,GACd,IAAMpE,EAASoE,EAAKxE,QAAQI,OAEtBoH,EADQhD,EAAKxE,QAAQK,KAAI,SAAA8F,GAAM,OAAIA,EAAOtG,SACvB4H,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAASC,KACzDnD,EAAKlC,QAAWkF,EAAWpH,KAG7BsG,EAAea,GAZC,2CAAH,qDAcfK,GAIMC,UAAUC,YACZD,UAAUC,YAAYC,mBAAmBjB,GAEzCrB,QAAQC,IAAI,qBAWf,IAQD,yBAAKpG,UAAU,OACb,yBAAKA,UAAU,wCACb,yBAAKA,UAAU,eAAeG,IAAI,wBAAwBG,IAAI,OAAOqC,MAAO,CAAC1C,MAAM,WACnF,4BACI,4BACA,oEACuC,IACrC,4BAAQD,UAAU,gBAAgB+B,KAAK,qBAAsBC,QAZzE,SAAqBL,GACnB2F,EAAiB3F,EAAEO,OAAOC,SAYd,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,gBAIJ,4BACE,4BAAQnC,UAAU,gBAAgBgC,QAAS,kBAAMuF,GAAcnC,KAA/D,yBADF,KAC2H,IAAdA,EAAoB,2DAA6D,MAIpM,yBAAKpF,UAAU,YACf,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAkBwE,OAAQA,EAAQV,YAAaA,EAAakB,cAAeA,EAAeI,UAAWA,OClEzFsD,QACW,cAA7BC,OAAOrC,SAASsC,UAEe,UAA7BD,OAAOrC,SAASsC,UAEhBD,OAAOrC,SAASsC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBV,WACrBA,UAAUW,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.43663a12.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Comment(props){\r\n    \r\n    return(\r\n        <div className=\"media mb-3\">\r\n        <img\r\n            className=\"mr-3 bg-light rounded\"\r\n            width=\"48\"\r\n            height=\"48\"\r\n            src={`https://api.adorable.io/avatars/48/${props.comment.toLowerCase()}@adorable.png`}\r\n            alt=\"avatar\"\r\n        />\r\n\r\n        <div className=\"media-body p-2 shadow-sm rounded bg-light border\">\r\n            <small className=\"float-right text-muted\">{props.stars}</small>\r\n            <h6 className=\"mt-0 mb-1 text-muted\">Note: {props.stars}</h6>\r\n            {props.comment}\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment;","import React, {useState, useEffect} from 'react';\r\nimport Comment from './Comment';\r\n\r\nfunction CommentList(props){\r\n    //Props & State\r\n    const selectedRestaurantRatings = props.ratings\r\n    const [ratings, setRatings] = useState([]);\r\n\r\n    //Adding ratings to Context restaurant list\r\n    useEffect(() => {\r\n        setRatings(selectedRestaurantRatings);\r\n    }, [selectedRestaurantRatings])\r\n\r\n    return(\r\n        ratings ?\r\n        <div className=\"commentList\">\r\n            <h5 className=\"text-muted mb-4\">\r\n                <span className=\"badge badge-success\">{ratings.length}</span>\r\n                Comment{ratings.length > 0 ? \"s\" : \"\"}\r\n            </h5>\r\n\r\n            {/* if there are no comments diplay a message */}\r\n            {ratings.length === 0  ? (\r\n                <div className=\"alert text-center alert-info\">\r\n                Be the first to comment\r\n                </div>\r\n            ) : null}\r\n\r\n            {ratings.map((rate, index) => (\r\n                <Comment key={index} comment={rate.comment} stars={rate.stars} />\r\n            ))}\r\n\r\n        </div>\r\n\r\n        : <div>Loading</div>\r\n    );\r\n}\r\n\r\nexport default CommentList;","import React, {useState} from 'react';\r\nimport CommentList from './CommentList';\r\n\r\nfunction CommentForm(props){\r\n    //Props & State\r\n    const selectedRestaurant = props.selectedRestaurant;\r\n    const [stars, setStars] = useState(\"-\");\r\n    const [comment, setComment] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n\r\n    //Stars Selected\r\n    function handleClick(e){\r\n        setStars(parseInt(e.target.value));\r\n    }\r\n\r\n    //Comment\r\n    function handleFieldChange(e) {\r\n        setComment(e.target.value) /// onchange --> update\r\n    }\r\n\r\n    //Adds comment on submit\r\n    function onSubmit(e){\r\n\r\n        e.preventDefault();\r\n        if (stars !== \"-\" && comment !== \"\"){\r\n            setError(\"\");\r\n            selectedRestaurant.ratings.push({stars: stars, comment: comment})\r\n\r\n            props.setSelectedRestaurant(selectedRestaurant)\r\n            setComment(\"\")\r\n\r\n        } else {\r\n            setError(\"Veullez selectionner une note et écrire un commentaire\");\r\n        }\r\n    }\r\n\r\n    //If comment and rate are not added it will display an error mesage\r\n    function renderError() {\r\n        return error ? (\r\n          <div className=\"alert alert-danger\">{error}</div>\r\n        ) : null;\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            <form method=\"post\" onSubmit={onSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label>Selectionnez votre note:</label>\r\n                    <select name=\"my_html_select_box\"  onClick={handleClick} className=\"form-control\">\r\n                        <option value=\"-\">-</option>\r\n                        <option value=\"1\">1 etoiles</option>\r\n                        <option value=\"2\">2 etoiles</option>\r\n                        <option value=\"3\">3 etoiles</option>\r\n                        <option value=\"4\">4 etoiles</option>\r\n                        <option value=\"5\">5 etoiles</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <textarea\r\n                    onChange={handleFieldChange}\r\n                    value={comment}\r\n                    className=\"form-control\"\r\n                    placeholder=\"🤔  Votre Commentaire\"\r\n                    name=\"comment\"\r\n                    rows=\"5\"\r\n                    />\r\n                </div>\r\n\r\n                {renderError()}\r\n\r\n                <div className=\"form-group\">\r\n                    <button className=\"btn btn-primary\" >\r\n                    Comment &#10148;\r\n                    </button>\r\n                </div>\r\n            </form>\r\n            <CommentList ratings={selectedRestaurant.ratings}/>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default CommentForm;","import React from 'react';\r\nimport CommentForm from './Comments/CommentForm';\r\n\r\nfunction Panel(props){\r\n\r\n    const selectedRestaurant = props.selectedRestaurant\r\n\r\n    //StreetView\r\n    const lat =  selectedRestaurant.lat;\r\n    const long = selectedRestaurant.long;\r\n    const streetView = \"https://maps.googleapis.com/maps/api/streetview?size=400x400&location=\" + lat + \",\" + long + \"9&fov=80&heading=70&pitch=0&key=AIzaSyBC2qgPQ2fK60hEy74CACKeZZ6zVT4MBcs\"\r\n\r\n    return(\r\n        <div style={props.panelStyles} >\r\n            <h3>{selectedRestaurant.restaurantName}</h3>\r\n            <img alt={selectedRestaurant.restaurantName} src={streetView}/>\r\n            <h6>Adresse:</h6>\r\n            <p>{selectedRestaurant.address}</p>\r\n            <h6>Average stars:</h6>\r\n            <p>{selectedRestaurant.average === undefined ? \"Unavailable\" : selectedRestaurant.average}</p>\r\n            <h6>Comments:</h6>\r\n            <CommentForm\r\n            setSelectedRestaurant={props.setSelectedRestaurant}\r\n            selectedRestaurant={selectedRestaurant}\r\n             />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Panel;","import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nfunction AddRestaurant(props){\r\n\r\n    const { register, handleSubmit, errors } = useForm()\r\n    const { show, closeModal } = props;\r\n\r\n    //When submiting form\r\n    const onSubmit = data => {\r\n\r\n        let newRestaurant = {\r\n                restaurantName: data.restaurant,\r\n                address: data.adresse,\r\n                lat: props.newRestLat,\r\n                long: props.newRestLng,\r\n                ratings: []\r\n            }\r\n        props.restaurants.push(newRestaurant);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={show ? \"modaleeee\" : \"hideeee\"}>\r\n                <button onClick={closeModal}>&times;</button>\r\n                <h4>Veuillez ajouter votre restaurant</h4>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <input name=\"restaurant\"  ref={register({ required: true })} placeholder = \"Nom du restaurant\" /> {errors.restaurant && <span>This field is required</span>}<br /><br />\r\n                    <input name=\"adresse\" ref={register({ required: true })} placeholder= \"Adresse du restaurant\"/> {errors.adresse && <span>This field is required</span>}<br /><br />\r\n                    <input type=\"submit\" onClick={closeModal}/>\r\n            </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddRestaurant;","import React, { useState, useEffect } from 'react';\r\nimport { Map, GoogleApiWrapper, Marker} from 'google-maps-react';\r\nimport Panel from './Panel';\r\nimport AddRestaurant from './AddRestaurant';\r\n\r\nexport function MapContainer (props) {\r\n\r\n  //State\r\n  const [mapStyles, setMapStyles] = useState({width: '100%',height: '100%'});\r\n  const [panelStyles, setPanelStyles] = useState({visibility: 'hidden'});\r\n  const [restaurants] = useState(props.restaurants);\r\n  const [geoloc] = useState(props.geoloc);\r\n  const [nearbySearch, setNearbySearch] = useState(undefined);\r\n  const [selectedRestaurant, setSelectedRestaurant] = useState(undefined);\r\n\r\n  //Fetching Google Place\r\n  function fetchPlaces(mapProps, map) {\r\n    const {google} = mapProps;\r\n    const service = new google.maps.places.PlacesService(map);\r\n    console.log(google, service);\r\n    const userPosition = new google.maps.LatLng(geoloc.lat, geoloc.lng);\r\n    const request = {\r\n      location: userPosition,\r\n      radius: '500',\r\n      type: ['restaurant']\r\n    };\r\n    service.nearbySearch(request, (data) => {\r\n      console.log(data);\r\n      data.forEach((element, index) => {\r\n        restaurants.push(\r\n          {\r\n            index: restaurants.length,\r\n            restaurantName:element.name,\r\n            address:element.vicinity,\r\n            lat:element.geometry.location.lat(),\r\n            long:element.geometry.location.lng(),\r\n            ratings: [],\r\n            average: element.rating\r\n          })\r\n      });\r\n      setNearbySearch(restaurants);\r\n    });\r\n  }\r\n\r\n  //Defines restaurant markers to be displayed on map\r\n  let restaurantDisplayed = null;\r\n  \r\n  if(props.selectedStars === \"-\" || props.selectedStars === undefined){\r\n    restaurantDisplayed = nearbySearch;\r\n  } else {\r\n    restaurantDisplayed = nearbySearch.filter( rest => {\r\n      if(rest.average >= parseInt(props.selectedStars)){\r\n        return rest\r\n      }\r\n    });\r\n  }\r\n\r\n  //When click on marker\r\n  function onMarkerClick(index) {\r\n    setMapStyles({width: '70%',height: '100%'});\r\n    setPanelStyles({\r\n      position: 'absolute',\r\n      right:'0px',\r\n      height: '100%',\r\n      width: '30%',\r\n      overflow: 'auto'\r\n    });\r\n    setSelectedRestaurant(restaurantDisplayed[index])\r\n  }\r\n  \r\n  //Modal\r\n  const [show, setShow] = useState(false);\r\n  const [openMod, setOpenMod] = useState(props.openModal);\r\n\r\n  const closeModal = () => setShow(false);\r\n\r\n  //Click geolocation\r\n  const [newRestLat, setNewRestLat] = useState();\r\n  const [newRestLng, setNewRestLng] = useState();\r\n\r\n  useEffect(() => {\r\n    setOpenMod(props.openModal)\r\n  }, [props.openModal]);\r\n\r\n  function  openModal(mapProps, map, clickEvent){\r\n\r\n    setNewRestLat(clickEvent.latLng.lat());\r\n    setNewRestLng(clickEvent.latLng.lng());\r\n\r\n    if (openMod){\r\n      setShow(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Map\r\n        onClick={openModal}\r\n        google={props.google}\r\n        onReady={fetchPlaces}\r\n        zoom={11}\r\n        style={mapStyles}\r\n        initialCenter={geoloc}\r\n        disableDefaultUI= {true}\r\n      >\r\n\r\n        {nearbySearch !== undefined ?\r\n          restaurantDisplayed.map((rest, index) =>\r\n            <Marker\r\n              key={index}\r\n              onClick={onMarkerClick.bind(this, index)}\r\n              title={rest.restaurantName}\r\n              name={rest.restaurantName}\r\n              position={{lat: rest.lat, lng: rest.long}} />\r\n          )\r\n          : console.log(\"failed\")}\r\n\r\n      </Map>\r\n      <AddRestaurant newRestLat={newRestLat} newRestLng={newRestLng} closeModal={closeModal} show={show} restaurants={restaurants}/>\r\n      {selectedRestaurant !== undefined ?\r\n      <Panel\r\n        panelStyles={panelStyles}\r\n        selectedRestaurant={selectedRestaurant}\r\n        setSelectedRestaurant={setSelectedRestaurant}\r\n      />\r\n      : console.log(\"panel erreur\")\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyBC2qgPQ2fK60hEy74CACKeZZ6zVT4MBcs'\r\n})(MapContainer);","import React, { useState, useEffect } from 'react';\r\nimport GoogleApiWrapper from './Components/Map';\r\n\r\nfunction App() {\r\n  \r\n  //state\r\n  const [restaurants, setRestaurants] = useState([]);\r\n  const [geoloc, setGeoloc] = useState({lat: 18.4625, lng:-66.1099});\r\n  const [selectedStars, setSelectedStars] = useState();\r\n  const [openModal, setOpenModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n\r\n    //Getting restaurant list from JSON\r\n    const fetchData = async () => {\r\n      const fetchResult = await fetch('./restaurants.JSON')\r\n        .then(response => response.json());\r\n\r\n      // calculating average stars per restaurant\r\n      fetchResult.map(rest => {\r\n        const length = rest.ratings.length;\r\n        const stars = rest.ratings.map(rating => rating.stars);\r\n        const totalStars = stars.reduce((total,star) => total += star)\r\n        rest.average =  totalStars/length;\r\n\r\n      } )\r\n      setRestaurants(fetchResult)\r\n    }\r\n    fetchData();\r\n\r\n    //Getting geolocation\r\n    function getLocation() {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(showPosition);\r\n      } else {\r\n        console.log(\"location failed\")\r\n      }\r\n    }\r\n\r\n    function showPosition(position) {\r\n      setGeoloc({\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude\r\n      })\r\n    }\r\n    getLocation()\r\n  }, []);\r\n \r\n  //Selecting stars in filter\r\n  function handleClick(e){\r\n    setSelectedStars(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <nav className=\"navbar navbar-expand-sm navbar-light\">\r\n        <img className=\"navbar-brand\" src=\"./Img/RESTIE_logo.png\" alt=\"logo\" style={{width:\"200px\"}} />\r\n        <ul>\r\n            <li>\r\n            <div>\r\n              Afficher les restaurants comportant {\" \"}\r\n              <select className=\"btn btn-light\" name=\"my_html_select_box\"  onClick={handleClick} >\r\n                <option value=\"-\">-</option>\r\n                <option value=\"1\">1 etoiles</option>\r\n                <option value=\"2\">2 etoiles</option>\r\n                <option value=\"3\">3 etoiles</option>\r\n                <option value=\"4\">4 etoiles</option>\r\n                <option value=\"5\">5 etoiles</option>\r\n              </select>\r\n            </div>\r\n            </li>\r\n            <li>\r\n              <button className=\"btn btn-light\" onClick={() => setOpenModal(!openModal)}>Ajouter un restaurant</button> {openModal === true ?\"puis cliquez sur la carte a l'emplacement du restaurant.\" : \"\"} \r\n            </li>\r\n        </ul>\r\n      </nav>\r\n      <div className=\"navLine\"></div>\r\n      <div className=\"map-container\">\r\n        <GoogleApiWrapper geoloc={geoloc} restaurants={restaurants} selectedStars={selectedStars} openModal={openModal}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}